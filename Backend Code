from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import asyncio
import random
import uvicorn
from typing import List

app = FastAPI()

templates = Jinja2Templates(directory="templates")

app.mount("/static", StaticFiles(directory="static"), name="static")


class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_json(self, message: dict, websocket: WebSocket):
        await websocket.send_json(message)

    async def broadcast(self, message: dict):
        for connection in self.active_connections:
            try:
                await connection.send_json(message)
            except:
                pass


manager = ConnectionManager()

disaster_types = [
    {"type": "earthquake", "icon": "ðŸŒŽ"},
    {"type": "flood", "icon": "ðŸŒŠ"},
    {"type": "wildfire", "icon": "ðŸ”¥"},
    {"type": "storm", "icon": "ðŸŒª"},
    {"type": "tsunami", "icon": "ðŸŒŠ"},
]

severity_levels = ["Minor", "Moderate", "Severe", "Critical"]


def get_random_coords():
    longitude = -124 + random.random() * 58  # approx -124 to -66
    latitude = 25 + random.random() * 24  # approx 25 to 49
    return [longitude, latitude]


def generate_alert():
    disaster = random.choice(disaster_types)
    severity = random.choice(severity_levels)
    description = f"{severity} {disaster['type'].capitalize()} detected."
    alert = {
        "id": int(asyncio.get_event_loop().time
